The test module for ``5-text_indentation``
++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++

Operations for ``def text_indentation(text)``
*******************************************************
*******************************************************

Import the function add_integer from the module:
	>>> matrix_mul = __import__('100-matrix_mul').matrix_mul
	
Test with both empty 1-D list argument:
	>>> a = []
	>>> b = []
	>>> print(matrix_mul(a, b))
	Traceback (most recent call last):
	...
	TypeError: m_a can't be empty
	
Test with one empty 1-D list argument:
	>>> a = []
	>>> b = [[8]]
	>>> print(matrix_mul(a, b))
	Traceback (most recent call last):
	...
	TypeError: m_a can't be empty
	
Test with one empty 1-D list argument:
	>>> a = [[8]]
	>>> b = []
	>>> print(matrix_mul(a, b))
	Traceback (most recent call last):
	...
	TypeError: m_b can't be empty
	
Test with both empty 2-D list argument:
	>>> a = [[]]
	>>> b = [[]]
	>>> print(matrix_mul(a, b))
	Traceback (most recent call last):
	...
	TypeError: m_a can't be empty

Test 2-D list of None argument:
	>>> a = [[None]]
	>>> b = [[None]]
	>>> print(matrix_mul(a, b))
	Traceback (most recent call last):
	...
	TypeError: m_a should contain only integers or floats


Test 2-D list of a-None argument:
	>>> a = [[None]]
	>>> b = [[6]]
	>>> print(matrix_mul(a, b))
	Traceback (most recent call last):
	...
	TypeError: m_a should contain only integers or floats

	
Test 2-D list of b-None argument:
	>>> a = [[6]]
	>>> b = [[None]]
	>>> print(matrix_mul(a, b))
	Traceback (most recent call last):
	...
	TypeError: m_b should contain only integers or floats

Test 2-D list with String argument:
	>>> a = [["Yusuf", 100]]
	>>> b = [["Yusuf", 100]]
	>>> print(matrix_mul(a, b))
	Traceback (most recent call last):
	...
	TypeError: m_a should contain only integers or floats
	
Test with Failed Condition for Matrix Multiplication:
	>>> a = [[7], [2]]
	>>> b = [[7], [2]]
	>>> print(matrix_mul(a, b))
	Traceback (most recent call last):
	...
	ValueError: m_a and m_b can't be multiplied
	
Test with non uniform rows:
	>>> a = [[7, 3, 2], [2]]
	>>> b = [[1, 2], [2, 1]]
	>>> print(matrix_mul(a, b))
	Traceback (most recent call last):
	...
	TypeError: each row of m_a must be of the same size
	
Test with non uniform rows:
	>>> a = [[7], [2]]
	>>> b = [[1, 2, 5], [2, 1]]
	>>> print(matrix_mul(a, b))
	Traceback (most recent call last):
	...
	TypeError: each row of m_b must be of the same size

Test with an None argument:
	>>> a = None
	>>> b = None
	>>> print(matrix_mul(a, b))
	Traceback (most recent call last):
	...
	TypeError: m_a must be a list

Test with an string argument:
	>>> a = "Yusuf"
	>>> b = "Abdulwasiu"
	>>> print(matrix_mul(a, b))
	Traceback (most recent call last):
	...
	TypeError: m_a must be a list

Test with an int argument:
	>>> a = 1
	>>> b = 5
	>>> print(matrix_mul(a, b))
	Traceback (most recent call last):
	...
	TypeError: m_a must be a list


Test with 1-D list with int argument:
	>>> a = [1, 2]
	>>> b = [5, 6]
	>>> print(matrix_mul(a, b))
	Traceback (most recent call last):
	...
	TypeError: m_a must be a list of list
	

Succesful result with int 3x3:
	>>> a = [[7, 3, 2], [2, 3, 5], [1, 2, 10]]
	>>> b = [[7, 3, 2], [2, 3, 5], [1, 2, 10]]
	>>> print(matrix_mul(a, b))
	[[57, 34, 49], [25, 25, 69], [21, 29, 112]]
	
Test with int 2x2:
	>>> a = [[7, 3], [2, 3]]
	>>> b = [[7, 3], [2, 3]]
	>>> print(matrix_mul(a, b))
	[[55, 30], [20, 15]]
	
Test with an int and float with both 2x2:
	>>> a = [[7, 3], [2.8, 0.93]]
	>>> b = [[7, 3], [2, 3]]
	>>> print(matrix_mul(a, b))
	[[55, 30], [21.459999999999997, 11.189999999999998]]

Test with a 1x1 int:
	>>> a = [[7]]
	>>> b = [[7]]
	>>> print(matrix_mul(a, b))
	[[49]]

Test with 1x1 and 1x7:
	>>> a = [[7]]
	>>> b = [[7, 6, 5, 4, 3, 2, 1]]
	>>> print(matrix_mul(a, b))
	[[49, 42, 35, 28, 21, 14, 7]]

