The test module for ``4-print_square``
++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++

Operations for ``def print_square(size):``
*******************************************************
*******************************************************

Import the function add_integer from the module:
	>>> print_square = __import__('4-print_square').print_square

Test with int:
	>>> print_square(4)
	####
	####
	####
	####

Test with neagative int:
	>>> print_square(-4)
	Traceback (most recent call last):
  	...
	ValueError: size must be >= 0

Test with a string argument:
	>>> print_square("Abc")
	Traceback (most recent call last):
  	...
	TypeError: size must be an integer

Test with a float argument:
	>>> print_square(7.7)
	#######
	#######
	#######
	#######
	#######
	#######
	#######

Test with a None:
	>>> print_square(None)
	Traceback (most recent call last):
  	...
	TypeError: size must be an integer

Test with direct define argument:
	>>> print_square(size=4)
	####
	####
	####
	####

Test with small float:
	>>> print_square(size=0.6)

Test witouth passing an arg:
	>>> print_square()
	Traceback (most recent call last):
	  File "<stdin>", line 1, in <module>
	TypeError: print_square() missing 1 required positional argument: 'size'

Test with zero as arg:
	>>> print_square(0)
