The test module for ``0-add_integer```
++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++

Operations for ``add_integer`` function
***************************************
***************************************

Import the function add_integer from the module:
 	>>> add_integer = __import__('0-add_integer').add_integer

Test the function with only 1 int argument:
	>>> add_integer(2)
	100

Test the function with 2 integers:
	>>> add_integer(4, 100)
	104

Test the function to validate the default ineger:
	>>> add_integer(0)
	98

Test a negative input:
	>>> add_integer(-1)
	97

Test both negative input:
	>>> add_integer(-1, -400)
	-401

Test negative and positve argument:
	>>> add_integer(-1, 40)
	39

Test input is float and other is int:
	>>> add_integer(4.5, 40)
	44

Test both input are positve float:
	>>> add_integer(4.5, 4.5)
	8

Test both input are negative float:
	>>> add_integer(-11.2, -6.95)
	-17

Test both input are negative float:
	>>> add_integer(-45.455, 13.5)
	-32

Test both input are very lage int:
	>>> add_integer(124445665655677, 34324395454854058409)
	34324519900519714086

Test both input are very lage float:
	>>> add_integer(1244456.65655677, 343243954548.54058409)
	343245199004

Add infinity:

    >>> add_integer(float('inf'), float('-inf'))
    Traceback (most recent call last):
    ...
    OverflowError: cannot convert float infinity to integer

Add nan:

    >>> add_integer(0, float('nan'))
    Traceback (most recent call last):
    ...
    ValueError: cannot convert float NaN to integer

Test first arg invalid:

    >>> add_integer("foo", 0)
    TypeError('a must be an integer')

Test second arg invalid:

    >>> add_integer(123123, [])
    TypeError('b must be an integer')

Test both args invalid:

    >>> add_integer(None, None)
    TypeError('a must be an integer')

Test two strings:

    >>> add_integer("foo", "bar")
    TypeError('a must be an integer')
